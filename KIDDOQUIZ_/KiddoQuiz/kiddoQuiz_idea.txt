in front end i have index file....in that page i have a proper webpage of a kiddoquiz website..

and in that page i have the options to home, quiz, about, leaderboard and login page..
in home page this page is loaded again...

and in the quiz option there are two options one is create quiz and one is attempt a quiz..
in create quiz i want to take the quiz id and the number of questions and number of participants and max allowed time for the quiz..and after that taking the questions and options with the correct answer one by one and this questions and 4 options may be in the form of the text or image...after successful creation of quiz redirect the user to the quiz page again...
and in attempt quiz user entered the quiz id and according to that if that quiz id is exist in the database we can show the user the number of participents and when the required number of participants are joined the quiz will be started and quiz will be started in the next page called quiz_questions.html page

in this quiz_questions.html page there is the window in which the questions and their options are appeared which the select any one option..one by one ...and after attempting all the questions the user got their number of correct question with their score...

in the about section user remains on the same page...
and in the login page the user create their account with the following details email and the password for the kiddoquiz...

Here's the content in a copy-friendly format for your notepad:

```
### Frontend Structure

1. **index.html** (Main Home Page)
   - Contains the main layout and navigation links (Home, Quiz, About, Leaderboard, Login).
   - Includes the homepage design and a way to navigate to other pages like Quiz, About, Leaderboard, and Login.

2. **quiz.html** (Quiz Section)
   - Contains two main options:
     - **Create Quiz**: Form where the admin can input quiz details (ID, number of questions, number of participants, max time). Followed by the question creation section with options for text or images.
     - **Attempt Quiz**: Input field for users to enter a quiz ID. It will check if the quiz exists in the database.

3. **create_quiz.html** (Quiz Creation Page)
   - Form to create quiz details:
     - Quiz ID
     - Number of Questions
     - Number of Participants
     - Max Time Allowed
   - After quiz creation, users are redirected to the quiz page.

4. **quiz_questions.html** (Quiz Attempt Page)
   - Displays the questions and their options (one at a time).
   - User selects an option and moves to the next question.
   - After the final question, the user receives a score with the number of correct answers.

5. **about.html** (About Page)
   - Static page with information about KiddoQuiz.
   - Keeps the user on the same page when navigating to this section.

6. **login.html** (Login Page)
   - Form for creating an account with email and password.
   - Includes form validation and redirect to the login page after successful signup.

7. **styles.css** (Styling for the Website)
   - Shared CSS file to style all pages, including layout, color scheme, and form elements.

### Backend Structure (Node.js)

1. **server.js** (Main Server File)
   - Sets up the server, routes, and handles requests between the frontend and backend.
   - Handles authentication, quiz creation, user login, and quiz attempts.

2. **routes/quizRoutes.js** (Quiz-related Routes)
   - **POST** `/create-quiz`: Handles quiz creation. It will accept the quiz details and store them in the database.
   - **GET** `/quiz/:quiz_id`: Fetches the quiz details by quiz ID for users attempting the quiz.
   - **POST** `/attempt-quiz`: Takes in quiz ID and manages the process of user participation.

3. **routes/userRoutes.js** (User-related Routes)
   - **POST** `/signup`: Handles user signup by storing the email and password in the database (with encryption for security).
   - **POST** `/login`: Manages user login and verifies credentials.
   
4. **models/Quiz.js** (Quiz Model)
   - Defines the structure of a quiz in the database (ID, number of questions, participants, max time, questions, etc.).
   - Includes schema for question details, options, and the correct answer.

5. **models/User.js** (User Model)
   - Defines the structure of a user in the database (email, password).

6. **models/Attempt.js** (Quiz Attempt Model)
   - Records user participation in a quiz, keeping track of questions answered, score, and time taken.

7. **views** (HTML Templates)
   - Contains all the static HTML files served by the backend (like `index.html`, `quiz.html`, etc.). These will be rendered through the backend.

8. **public** (Static Assets)
   - Contains images, JavaScript files, and CSS (like `style.css`) that are served statically.

### Database (MySQL)

1. **users** Table
   - Columns: id, email, password (hashed).
   
2. **quizzes** Table
   - Columns: quiz_id, number of questions, number of participants, max time allowed, questions (JSON), created_at, etc.
   
3. **questions** Table
   - Columns: questionId, quiz_id, question_text, options (JSON), correct_answer.
   
4. **attempts** Table
   - Columns: attemptId, quiz_id, userId, answers (JSON), score, time_taken, completed_at.

5. **leaderboard** Table
   - Columns: userId, quiz_id, score, rank.

### Flow of Operations

- **User Signup/Login**:
   - The user signs up or logs in via the `login.html` page.
   - The backend validates credentials and stores user data securely.

- **Create Quiz**:
   - Admin creates a quiz with details via `create_quiz.html`, and the quiz is stored in the backend database.

- **Attempt Quiz**:
   - Users enter the quiz ID in `attempt_quiz.html`.
   - The backend checks the quiz ID, and if valid, it shows the questions from `quiz_questions.html` page.

- **Quiz Completion**:
   - After answering all the questions, the backend calculates the score and shows the results on the frontend.

